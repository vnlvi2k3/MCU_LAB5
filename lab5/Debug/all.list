
all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e44  08003e44  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e44  08003e44  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e44  08003e44  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000068  08003eb4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003eb4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea07  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b9  00000000  00000000  0002ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00030d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017325  00000000  00000000  000327d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f15e  00000000  00000000  00049af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089076  00000000  00000000  00058c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037dc  00000000  00000000  000e1d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e00 	.word	0x08003e00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003e00 	.word	0x08003e00

0800014c <isButtonPressed>:
int TimerForKeyPress[N_BUTTON] = {200, 200, 200};
int button_flag[N_BUTTON] = {0, 0, 0};
GPIO_TypeDef* but[N_BUTTON] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port};
uint16_t pin[N_BUTTON] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

int isButtonPressed(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[i]){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d006      	beq.n	800016e <isButtonPressed+0x22>
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000084 	.word	0x20000084

08000180 <subKeyProcess>:
void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000084 	.word	0x20000084

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i =0; i<N_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(but[i], pin[i]);
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 ff10 	bl	8002004 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <getKeyInput+0xfc>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4927      	ldr	r1, [pc, #156]	; (8000298 <getKeyInput+0xf8>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x100>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if(KeyReg3[i] != KeyReg2[i]){
 8000218:	4a24      	ldr	r2, [pc, #144]	; (80002ac <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x100>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <getKeyInput+0x100>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <getKeyInput+0x100>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 200;
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <getKeyInput+0x110>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	21c8      	movs	r1, #200	; 0xc8
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			}
			else{
				TimerForKeyPress[i] --;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i =0; i<N_BUTTON; i++){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000018 	.word	0x20000018
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000048 	.word	0x20000048
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000030 	.word	0x20000030

080002b4 <initialize>:
int amber_timer = 2;
int green_timer = 3;
int TF_buffer[4] = {RED_GREEN, RED_AMBER, GREEN_RED, AMBER_RED};
int index_normal_state = 0;

void initialize(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002be:	4815      	ldr	r0, [pc, #84]	; (8000314 <initialize+0x60>)
 80002c0:	f001 feb7 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ca:	4812      	ldr	r0, [pc, #72]	; (8000314 <initialize+0x60>)
 80002cc:	f001 feb1 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d6:	480f      	ldr	r0, [pc, #60]	; (8000314 <initialize+0x60>)
 80002d8:	f001 feab 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <initialize+0x60>)
 80002e2:	f001 fea6 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	480a      	ldr	r0, [pc, #40]	; (8000314 <initialize+0x60>)
 80002ec:	f001 fea1 	bl	8002032 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <initialize+0x60>)
 80002f6:	f001 fe9c 	bl	8002032 <HAL_GPIO_WritePin>
//	init_timer();
	status = RED_GREEN;
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <initialize+0x64>)
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
	counter1 = red_timer;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <initialize+0x68>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a06      	ldr	r2, [pc, #24]	; (8000320 <initialize+0x6c>)
 8000306:	6013      	str	r3, [r2, #0]
	counter2 = green_timer;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <initialize+0x70>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <initialize+0x74>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40010800 	.word	0x40010800
 8000318:	200000b0 	.word	0x200000b0
 800031c:	20000050 	.word	0x20000050
 8000320:	200000a4 	.word	0x200000a4
 8000324:	20000058 	.word	0x20000058
 8000328:	200000a8 	.word	0x200000a8

0800032c <display7SEG>:
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
	HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
}

void display7SEG(int num){
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b09      	cmp	r3, #9
 8000338:	f200 8180 	bhi.w	800063c <display7SEG+0x310>
 800033c:	a201      	add	r2, pc, #4	; (adr r2, 8000344 <display7SEG+0x18>)
 800033e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000342:	bf00      	nop
 8000344:	0800036d 	.word	0x0800036d
 8000348:	080003b5 	.word	0x080003b5
 800034c:	080003fd 	.word	0x080003fd
 8000350:	08000445 	.word	0x08000445
 8000354:	0800048d 	.word	0x0800048d
 8000358:	080004d5 	.word	0x080004d5
 800035c:	0800051d 	.word	0x0800051d
 8000360:	08000565 	.word	0x08000565
 8000364:	080005ad 	.word	0x080005ad
 8000368:	080005f5 	.word	0x080005f5
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2101      	movs	r1, #1
 8000370:	48b5      	ldr	r0, [pc, #724]	; (8000648 <display7SEG+0x31c>)
 8000372:	f001 fe5e 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2102      	movs	r1, #2
 800037a:	48b3      	ldr	r0, [pc, #716]	; (8000648 <display7SEG+0x31c>)
 800037c:	f001 fe59 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2104      	movs	r1, #4
 8000384:	48b0      	ldr	r0, [pc, #704]	; (8000648 <display7SEG+0x31c>)
 8000386:	f001 fe54 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2108      	movs	r1, #8
 800038e:	48ae      	ldr	r0, [pc, #696]	; (8000648 <display7SEG+0x31c>)
 8000390:	f001 fe4f 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	48ab      	ldr	r0, [pc, #684]	; (8000648 <display7SEG+0x31c>)
 800039a:	f001 fe4a 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	48a9      	ldr	r0, [pc, #676]	; (8000648 <display7SEG+0x31c>)
 80003a4:	f001 fe45 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2140      	movs	r1, #64	; 0x40
 80003ac:	48a6      	ldr	r0, [pc, #664]	; (8000648 <display7SEG+0x31c>)
 80003ae:	f001 fe40 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 80003b2:	e144      	b.n	800063e <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2101      	movs	r1, #1
 80003b8:	48a3      	ldr	r0, [pc, #652]	; (8000648 <display7SEG+0x31c>)
 80003ba:	f001 fe3a 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2102      	movs	r1, #2
 80003c2:	48a1      	ldr	r0, [pc, #644]	; (8000648 <display7SEG+0x31c>)
 80003c4:	f001 fe35 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2104      	movs	r1, #4
 80003cc:	489e      	ldr	r0, [pc, #632]	; (8000648 <display7SEG+0x31c>)
 80003ce:	f001 fe30 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2108      	movs	r1, #8
 80003d6:	489c      	ldr	r0, [pc, #624]	; (8000648 <display7SEG+0x31c>)
 80003d8:	f001 fe2b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	4899      	ldr	r0, [pc, #612]	; (8000648 <display7SEG+0x31c>)
 80003e2:	f001 fe26 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2120      	movs	r1, #32
 80003ea:	4897      	ldr	r0, [pc, #604]	; (8000648 <display7SEG+0x31c>)
 80003ec:	f001 fe21 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2140      	movs	r1, #64	; 0x40
 80003f4:	4894      	ldr	r0, [pc, #592]	; (8000648 <display7SEG+0x31c>)
 80003f6:	f001 fe1c 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 80003fa:	e120      	b.n	800063e <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2101      	movs	r1, #1
 8000400:	4891      	ldr	r0, [pc, #580]	; (8000648 <display7SEG+0x31c>)
 8000402:	f001 fe16 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2102      	movs	r1, #2
 800040a:	488f      	ldr	r0, [pc, #572]	; (8000648 <display7SEG+0x31c>)
 800040c:	f001 fe11 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2104      	movs	r1, #4
 8000414:	488c      	ldr	r0, [pc, #560]	; (8000648 <display7SEG+0x31c>)
 8000416:	f001 fe0c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	488a      	ldr	r0, [pc, #552]	; (8000648 <display7SEG+0x31c>)
 8000420:	f001 fe07 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	4887      	ldr	r0, [pc, #540]	; (8000648 <display7SEG+0x31c>)
 800042a:	f001 fe02 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2120      	movs	r1, #32
 8000432:	4885      	ldr	r0, [pc, #532]	; (8000648 <display7SEG+0x31c>)
 8000434:	f001 fdfd 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4882      	ldr	r0, [pc, #520]	; (8000648 <display7SEG+0x31c>)
 800043e:	f001 fdf8 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000442:	e0fc      	b.n	800063e <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	487f      	ldr	r0, [pc, #508]	; (8000648 <display7SEG+0x31c>)
 800044a:	f001 fdf2 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2102      	movs	r1, #2
 8000452:	487d      	ldr	r0, [pc, #500]	; (8000648 <display7SEG+0x31c>)
 8000454:	f001 fded 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2104      	movs	r1, #4
 800045c:	487a      	ldr	r0, [pc, #488]	; (8000648 <display7SEG+0x31c>)
 800045e:	f001 fde8 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2108      	movs	r1, #8
 8000466:	4878      	ldr	r0, [pc, #480]	; (8000648 <display7SEG+0x31c>)
 8000468:	f001 fde3 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2110      	movs	r1, #16
 8000470:	4875      	ldr	r0, [pc, #468]	; (8000648 <display7SEG+0x31c>)
 8000472:	f001 fdde 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2120      	movs	r1, #32
 800047a:	4873      	ldr	r0, [pc, #460]	; (8000648 <display7SEG+0x31c>)
 800047c:	f001 fdd9 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	4870      	ldr	r0, [pc, #448]	; (8000648 <display7SEG+0x31c>)
 8000486:	f001 fdd4 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 800048a:	e0d8      	b.n	800063e <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2101      	movs	r1, #1
 8000490:	486d      	ldr	r0, [pc, #436]	; (8000648 <display7SEG+0x31c>)
 8000492:	f001 fdce 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2102      	movs	r1, #2
 800049a:	486b      	ldr	r0, [pc, #428]	; (8000648 <display7SEG+0x31c>)
 800049c:	f001 fdc9 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2104      	movs	r1, #4
 80004a4:	4868      	ldr	r0, [pc, #416]	; (8000648 <display7SEG+0x31c>)
 80004a6:	f001 fdc4 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2108      	movs	r1, #8
 80004ae:	4866      	ldr	r0, [pc, #408]	; (8000648 <display7SEG+0x31c>)
 80004b0:	f001 fdbf 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2110      	movs	r1, #16
 80004b8:	4863      	ldr	r0, [pc, #396]	; (8000648 <display7SEG+0x31c>)
 80004ba:	f001 fdba 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2120      	movs	r1, #32
 80004c2:	4861      	ldr	r0, [pc, #388]	; (8000648 <display7SEG+0x31c>)
 80004c4:	f001 fdb5 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	485e      	ldr	r0, [pc, #376]	; (8000648 <display7SEG+0x31c>)
 80004ce:	f001 fdb0 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 80004d2:	e0b4      	b.n	800063e <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	485b      	ldr	r0, [pc, #364]	; (8000648 <display7SEG+0x31c>)
 80004da:	f001 fdaa 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2102      	movs	r1, #2
 80004e2:	4859      	ldr	r0, [pc, #356]	; (8000648 <display7SEG+0x31c>)
 80004e4:	f001 fda5 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	4856      	ldr	r0, [pc, #344]	; (8000648 <display7SEG+0x31c>)
 80004ee:	f001 fda0 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	4854      	ldr	r0, [pc, #336]	; (8000648 <display7SEG+0x31c>)
 80004f8:	f001 fd9b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2110      	movs	r1, #16
 8000500:	4851      	ldr	r0, [pc, #324]	; (8000648 <display7SEG+0x31c>)
 8000502:	f001 fd96 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	484f      	ldr	r0, [pc, #316]	; (8000648 <display7SEG+0x31c>)
 800050c:	f001 fd91 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	484c      	ldr	r0, [pc, #304]	; (8000648 <display7SEG+0x31c>)
 8000516:	f001 fd8c 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 800051a:	e090      	b.n	800063e <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2101      	movs	r1, #1
 8000520:	4849      	ldr	r0, [pc, #292]	; (8000648 <display7SEG+0x31c>)
 8000522:	f001 fd86 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2102      	movs	r1, #2
 800052a:	4847      	ldr	r0, [pc, #284]	; (8000648 <display7SEG+0x31c>)
 800052c:	f001 fd81 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2104      	movs	r1, #4
 8000534:	4844      	ldr	r0, [pc, #272]	; (8000648 <display7SEG+0x31c>)
 8000536:	f001 fd7c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4842      	ldr	r0, [pc, #264]	; (8000648 <display7SEG+0x31c>)
 8000540:	f001 fd77 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2110      	movs	r1, #16
 8000548:	483f      	ldr	r0, [pc, #252]	; (8000648 <display7SEG+0x31c>)
 800054a:	f001 fd72 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2120      	movs	r1, #32
 8000552:	483d      	ldr	r0, [pc, #244]	; (8000648 <display7SEG+0x31c>)
 8000554:	f001 fd6d 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	483a      	ldr	r0, [pc, #232]	; (8000648 <display7SEG+0x31c>)
 800055e:	f001 fd68 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000562:	e06c      	b.n	800063e <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	4837      	ldr	r0, [pc, #220]	; (8000648 <display7SEG+0x31c>)
 800056a:	f001 fd62 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2102      	movs	r1, #2
 8000572:	4835      	ldr	r0, [pc, #212]	; (8000648 <display7SEG+0x31c>)
 8000574:	f001 fd5d 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2104      	movs	r1, #4
 800057c:	4832      	ldr	r0, [pc, #200]	; (8000648 <display7SEG+0x31c>)
 800057e:	f001 fd58 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2108      	movs	r1, #8
 8000586:	4830      	ldr	r0, [pc, #192]	; (8000648 <display7SEG+0x31c>)
 8000588:	f001 fd53 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	482d      	ldr	r0, [pc, #180]	; (8000648 <display7SEG+0x31c>)
 8000592:	f001 fd4e 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2120      	movs	r1, #32
 800059a:	482b      	ldr	r0, [pc, #172]	; (8000648 <display7SEG+0x31c>)
 800059c:	f001 fd49 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	4828      	ldr	r0, [pc, #160]	; (8000648 <display7SEG+0x31c>)
 80005a6:	f001 fd44 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 80005aa:	e048      	b.n	800063e <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2101      	movs	r1, #1
 80005b0:	4825      	ldr	r0, [pc, #148]	; (8000648 <display7SEG+0x31c>)
 80005b2:	f001 fd3e 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2102      	movs	r1, #2
 80005ba:	4823      	ldr	r0, [pc, #140]	; (8000648 <display7SEG+0x31c>)
 80005bc:	f001 fd39 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2104      	movs	r1, #4
 80005c4:	4820      	ldr	r0, [pc, #128]	; (8000648 <display7SEG+0x31c>)
 80005c6:	f001 fd34 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	481e      	ldr	r0, [pc, #120]	; (8000648 <display7SEG+0x31c>)
 80005d0:	f001 fd2f 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	481b      	ldr	r0, [pc, #108]	; (8000648 <display7SEG+0x31c>)
 80005da:	f001 fd2a 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <display7SEG+0x31c>)
 80005e4:	f001 fd25 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <display7SEG+0x31c>)
 80005ee:	f001 fd20 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 80005f2:	e024      	b.n	800063e <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <display7SEG+0x31c>)
 80005fa:	f001 fd1a 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2102      	movs	r1, #2
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <display7SEG+0x31c>)
 8000604:	f001 fd15 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2104      	movs	r1, #4
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <display7SEG+0x31c>)
 800060e:	f001 fd10 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2108      	movs	r1, #8
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <display7SEG+0x31c>)
 8000618:	f001 fd0b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <display7SEG+0x31c>)
 8000622:	f001 fd06 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <display7SEG+0x31c>)
 800062c:	f001 fd01 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <display7SEG+0x31c>)
 8000636:	f001 fcfc 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 800063a:	e000      	b.n	800063e <display7SEG+0x312>
	default:
		break;
 800063c:	bf00      	nop
	}
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010c00 	.word	0x40010c00

0800064c <updateBuffer>:
		break;
	default:
		break;
	}
}
void updateBuffer(){
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	switch(status){
 8000650:	4b50      	ldr	r3, [pc, #320]	; (8000794 <updateBuffer+0x148>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b08      	cmp	r3, #8
 8000656:	d046      	beq.n	80006e6 <updateBuffer+0x9a>
 8000658:	2b08      	cmp	r3, #8
 800065a:	dc64      	bgt.n	8000726 <updateBuffer+0xda>
 800065c:	2b06      	cmp	r3, #6
 800065e:	d002      	beq.n	8000666 <updateBuffer+0x1a>
 8000660:	2b07      	cmp	r3, #7
 8000662:	d020      	beq.n	80006a6 <updateBuffer+0x5a>
 8000664:	e05f      	b.n	8000726 <updateBuffer+0xda>
	case MAN_RED:
		led_buffer[0] = 0;
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <updateBuffer+0x14c>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
		led_buffer[1] = 2;
 800066c:	4b4a      	ldr	r3, [pc, #296]	; (8000798 <updateBuffer+0x14c>)
 800066e:	2202      	movs	r2, #2
 8000670:	605a      	str	r2, [r3, #4]
		led_buffer[2] = modify_val / 10;
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <updateBuffer+0x150>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a4a      	ldr	r2, [pc, #296]	; (80007a0 <updateBuffer+0x154>)
 8000678:	fb82 1203 	smull	r1, r2, r2, r3
 800067c:	1092      	asrs	r2, r2, #2
 800067e:	17db      	asrs	r3, r3, #31
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a45      	ldr	r2, [pc, #276]	; (8000798 <updateBuffer+0x14c>)
 8000684:	6093      	str	r3, [r2, #8]
		led_buffer[3] = modify_val % 10;
 8000686:	4b45      	ldr	r3, [pc, #276]	; (800079c <updateBuffer+0x150>)
 8000688:	6819      	ldr	r1, [r3, #0]
 800068a:	4b45      	ldr	r3, [pc, #276]	; (80007a0 <updateBuffer+0x154>)
 800068c:	fb83 2301 	smull	r2, r3, r3, r1
 8000690:	109a      	asrs	r2, r3, #2
 8000692:	17cb      	asrs	r3, r1, #31
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	1aca      	subs	r2, r1, r3
 80006a0:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <updateBuffer+0x14c>)
 80006a2:	60da      	str	r2, [r3, #12]
		break;
 80006a4:	e072      	b.n	800078c <updateBuffer+0x140>
	case MAN_AMBER:
		led_buffer[0] = 0;
 80006a6:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <updateBuffer+0x14c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
		led_buffer[1] = 3;
 80006ac:	4b3a      	ldr	r3, [pc, #232]	; (8000798 <updateBuffer+0x14c>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	605a      	str	r2, [r3, #4]
		led_buffer[2] = modify_val / 10;
 80006b2:	4b3a      	ldr	r3, [pc, #232]	; (800079c <updateBuffer+0x150>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <updateBuffer+0x154>)
 80006b8:	fb82 1203 	smull	r1, r2, r2, r3
 80006bc:	1092      	asrs	r2, r2, #2
 80006be:	17db      	asrs	r3, r3, #31
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	4a35      	ldr	r2, [pc, #212]	; (8000798 <updateBuffer+0x14c>)
 80006c4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = modify_val % 10;
 80006c6:	4b35      	ldr	r3, [pc, #212]	; (800079c <updateBuffer+0x150>)
 80006c8:	6819      	ldr	r1, [r3, #0]
 80006ca:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <updateBuffer+0x154>)
 80006cc:	fb83 2301 	smull	r2, r3, r3, r1
 80006d0:	109a      	asrs	r2, r3, #2
 80006d2:	17cb      	asrs	r3, r1, #31
 80006d4:	1ad2      	subs	r2, r2, r3
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	1aca      	subs	r2, r1, r3
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <updateBuffer+0x14c>)
 80006e2:	60da      	str	r2, [r3, #12]
		break;
 80006e4:	e052      	b.n	800078c <updateBuffer+0x140>
	case MAN_GREEN:
		led_buffer[0] = 0;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <updateBuffer+0x14c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
		led_buffer[1] = 4;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <updateBuffer+0x14c>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	605a      	str	r2, [r3, #4]
		led_buffer[2] = modify_val / 10;
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <updateBuffer+0x150>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <updateBuffer+0x154>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	1092      	asrs	r2, r2, #2
 80006fe:	17db      	asrs	r3, r3, #31
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <updateBuffer+0x14c>)
 8000704:	6093      	str	r3, [r2, #8]
		led_buffer[3] = modify_val % 10;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <updateBuffer+0x150>)
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <updateBuffer+0x154>)
 800070c:	fb83 2301 	smull	r2, r3, r3, r1
 8000710:	109a      	asrs	r2, r3, #2
 8000712:	17cb      	asrs	r3, r1, #31
 8000714:	1ad2      	subs	r2, r2, r3
 8000716:	4613      	mov	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	1aca      	subs	r2, r1, r3
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <updateBuffer+0x14c>)
 8000722:	60da      	str	r2, [r3, #12]
		break;
 8000724:	e032      	b.n	800078c <updateBuffer+0x140>
	default:
		led_buffer[0] = counter1 / 10;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <updateBuffer+0x158>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <updateBuffer+0x154>)
 800072c:	fb82 1203 	smull	r1, r2, r2, r3
 8000730:	1092      	asrs	r2, r2, #2
 8000732:	17db      	asrs	r3, r3, #31
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <updateBuffer+0x14c>)
 8000738:	6013      	str	r3, [r2, #0]
		led_buffer[1] = counter1 % 10;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <updateBuffer+0x158>)
 800073c:	6819      	ldr	r1, [r3, #0]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <updateBuffer+0x154>)
 8000740:	fb83 2301 	smull	r2, r3, r3, r1
 8000744:	109a      	asrs	r2, r3, #2
 8000746:	17cb      	asrs	r3, r1, #31
 8000748:	1ad2      	subs	r2, r2, r3
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	1aca      	subs	r2, r1, r3
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <updateBuffer+0x14c>)
 8000756:	605a      	str	r2, [r3, #4]
		led_buffer[2] = counter2 / 10;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <updateBuffer+0x15c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <updateBuffer+0x154>)
 800075e:	fb82 1203 	smull	r1, r2, r2, r3
 8000762:	1092      	asrs	r2, r2, #2
 8000764:	17db      	asrs	r3, r3, #31
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <updateBuffer+0x14c>)
 800076a:	6093      	str	r3, [r2, #8]
		led_buffer[3] = counter2 % 10;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <updateBuffer+0x15c>)
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <updateBuffer+0x154>)
 8000772:	fb83 2301 	smull	r2, r3, r3, r1
 8000776:	109a      	asrs	r2, r3, #2
 8000778:	17cb      	asrs	r3, r1, #31
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	1aca      	subs	r2, r1, r3
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <updateBuffer+0x14c>)
 8000788:	60da      	str	r2, [r3, #12]
		break;
 800078a:	bf00      	nop
	}
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	200000b0 	.word	0x200000b0
 8000798:	20000090 	.word	0x20000090
 800079c:	200000ac 	.word	0x200000ac
 80007a0:	66666667 	.word	0x66666667
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	200000a8 	.word	0x200000a8

080007ac <blinkLEDs>:
	default:
		break;
	}
}

void blinkLEDs(void ){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	switch(status){
 80007b0:	4b36      	ldr	r3, [pc, #216]	; (800088c <blinkLEDs+0xe0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d046      	beq.n	8000846 <blinkLEDs+0x9a>
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	dc64      	bgt.n	8000886 <blinkLEDs+0xda>
 80007bc:	2b06      	cmp	r3, #6
 80007be:	d002      	beq.n	80007c6 <blinkLEDs+0x1a>
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d020      	beq.n	8000806 <blinkLEDs+0x5a>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
		break;
	default:
		break;
 80007c4:	e05f      	b.n	8000886 <blinkLEDs+0xda>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80007c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ca:	4831      	ldr	r0, [pc, #196]	; (8000890 <blinkLEDs+0xe4>)
 80007cc:	f001 fc49 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	482e      	ldr	r0, [pc, #184]	; (8000890 <blinkLEDs+0xe4>)
 80007d8:	f001 fc2b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e2:	482b      	ldr	r0, [pc, #172]	; (8000890 <blinkLEDs+0xe4>)
 80007e4:	f001 fc25 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80007e8:	2110      	movs	r1, #16
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <blinkLEDs+0xe4>)
 80007ec:	f001 fc39 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2120      	movs	r1, #32
 80007f4:	4826      	ldr	r0, [pc, #152]	; (8000890 <blinkLEDs+0xe4>)
 80007f6:	f001 fc1c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4824      	ldr	r0, [pc, #144]	; (8000890 <blinkLEDs+0xe4>)
 8000800:	f001 fc17 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000804:	e040      	b.n	8000888 <blinkLEDs+0xdc>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080c:	4820      	ldr	r0, [pc, #128]	; (8000890 <blinkLEDs+0xe4>)
 800080e:	f001 fc10 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(AMBER1_GPIO_Port, AMBER1_Pin);
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <blinkLEDs+0xe4>)
 8000818:	f001 fc23 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <blinkLEDs+0xe4>)
 8000824:	f001 fc05 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2110      	movs	r1, #16
 800082c:	4818      	ldr	r0, [pc, #96]	; (8000890 <blinkLEDs+0xe4>)
 800082e:	f001 fc00 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(AMBER2_GPIO_Port, AMBER2_Pin);
 8000832:	2120      	movs	r1, #32
 8000834:	4816      	ldr	r0, [pc, #88]	; (8000890 <blinkLEDs+0xe4>)
 8000836:	f001 fc14 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	4814      	ldr	r0, [pc, #80]	; (8000890 <blinkLEDs+0xe4>)
 8000840:	f001 fbf7 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000844:	e020      	b.n	8000888 <blinkLEDs+0xdc>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <blinkLEDs+0xe4>)
 800084e:	f001 fbf0 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	480e      	ldr	r0, [pc, #56]	; (8000890 <blinkLEDs+0xe4>)
 8000858:	f001 fc03 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <blinkLEDs+0xe4>)
 8000864:	f001 fbe5 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2110      	movs	r1, #16
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <blinkLEDs+0xe4>)
 800086e:	f001 fbe0 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <blinkLEDs+0xe4>)
 8000876:	f001 fbf4 	bl	8002062 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <blinkLEDs+0xe4>)
 8000880:	f001 fbd7 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000884:	e000      	b.n	8000888 <blinkLEDs+0xdc>
		break;
 8000886:	bf00      	nop
	}
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200000b0 	.word	0x200000b0
 8000890:	40010800 	.word	0x40010800

08000894 <scan7SEG>:
void scan7SEG(void ){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	switch(index_buffer){
 8000898:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <scan7SEG+0x12c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d87f      	bhi.n	80009a0 <scan7SEG+0x10c>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <scan7SEG+0x14>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008f3 	.word	0x080008f3
 80008b0:	0800092d 	.word	0x0800092d
 80008b4:	08000967 	.word	0x08000967
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4841      	ldr	r0, [pc, #260]	; (80009c4 <scan7SEG+0x130>)
 80008be:	f001 fbb8 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c8:	483e      	ldr	r0, [pc, #248]	; (80009c4 <scan7SEG+0x130>)
 80008ca:	f001 fbb2 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d4:	483b      	ldr	r0, [pc, #236]	; (80009c4 <scan7SEG+0x130>)
 80008d6:	f001 fbac 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e0:	4838      	ldr	r0, [pc, #224]	; (80009c4 <scan7SEG+0x130>)
 80008e2:	f001 fba6 	bl	8002032 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <scan7SEG+0x134>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fd1e 	bl	800032c <display7SEG>
		break;
 80008f0:	e057      	b.n	80009a2 <scan7SEG+0x10e>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	4833      	ldr	r0, [pc, #204]	; (80009c4 <scan7SEG+0x130>)
 80008f8:	f001 fb9b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000902:	4830      	ldr	r0, [pc, #192]	; (80009c4 <scan7SEG+0x130>)
 8000904:	f001 fb95 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <scan7SEG+0x130>)
 8000910:	f001 fb8f 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <scan7SEG+0x130>)
 800091c:	f001 fb89 	bl	8002032 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <scan7SEG+0x134>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fd01 	bl	800032c <display7SEG>
		break;
 800092a:	e03a      	b.n	80009a2 <scan7SEG+0x10e>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	4824      	ldr	r0, [pc, #144]	; (80009c4 <scan7SEG+0x130>)
 8000932:	f001 fb7e 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093c:	4821      	ldr	r0, [pc, #132]	; (80009c4 <scan7SEG+0x130>)
 800093e:	f001 fb78 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000948:	481e      	ldr	r0, [pc, #120]	; (80009c4 <scan7SEG+0x130>)
 800094a:	f001 fb72 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	481b      	ldr	r0, [pc, #108]	; (80009c4 <scan7SEG+0x130>)
 8000956:	f001 fb6c 	bl	8002032 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <scan7SEG+0x134>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fce4 	bl	800032c <display7SEG>
		break;
 8000964:	e01d      	b.n	80009a2 <scan7SEG+0x10e>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4816      	ldr	r0, [pc, #88]	; (80009c4 <scan7SEG+0x130>)
 800096c:	f001 fb61 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <scan7SEG+0x130>)
 8000978:	f001 fb5b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <scan7SEG+0x130>)
 8000984:	f001 fb55 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <scan7SEG+0x130>)
 8000990:	f001 fb4f 	bl	8002032 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <scan7SEG+0x134>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fcc7 	bl	800032c <display7SEG>
		break;
 800099e:	e000      	b.n	80009a2 <scan7SEG+0x10e>
	default:
		break;
 80009a0:	bf00      	nop
	}
	index_buffer++;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <scan7SEG+0x12c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <scan7SEG+0x12c>)
 80009aa:	6013      	str	r3, [r2, #0]
	if(index_buffer >= 4) index_buffer = 0;
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <scan7SEG+0x12c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	dd02      	ble.n	80009ba <scan7SEG+0x126>
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <scan7SEG+0x12c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	40010800 	.word	0x40010800
 80009c8:	20000090 	.word	0x20000090

080009cc <routine_1sec>:
void routine_1sec(void ){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	switch(status){
 80009d0:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <routine_1sec+0x1f4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3b02      	subs	r3, #2
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80a      	bhi.n	80009f0 <routine_1sec+0x24>
	case RED_GREEN:
	case RED_AMBER:
	case GREEN_RED:
	case AMBER_RED:
		counter1--;
 80009da:	4b7a      	ldr	r3, [pc, #488]	; (8000bc4 <routine_1sec+0x1f8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3b01      	subs	r3, #1
 80009e0:	4a78      	ldr	r2, [pc, #480]	; (8000bc4 <routine_1sec+0x1f8>)
 80009e2:	6013      	str	r3, [r2, #0]
		counter2--;
 80009e4:	4b78      	ldr	r3, [pc, #480]	; (8000bc8 <routine_1sec+0x1fc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a77      	ldr	r2, [pc, #476]	; (8000bc8 <routine_1sec+0x1fc>)
 80009ec:	6013      	str	r3, [r2, #0]
		break;
 80009ee:	e000      	b.n	80009f2 <routine_1sec+0x26>
	default:
		break;
 80009f0:	bf00      	nop
	}
	if(counter1 < 0 || counter2 < 0){
 80009f2:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <routine_1sec+0x1f8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db03      	blt.n	8000a02 <routine_1sec+0x36>
 80009fa:	4b73      	ldr	r3, [pc, #460]	; (8000bc8 <routine_1sec+0x1fc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da3e      	bge.n	8000a80 <routine_1sec+0xb4>
		switch (status) {
 8000a02:	4b6f      	ldr	r3, [pc, #444]	; (8000bc0 <routine_1sec+0x1f4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3b02      	subs	r3, #2
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d83b      	bhi.n	8000a84 <routine_1sec+0xb8>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <routine_1sec+0x48>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a37 	.word	0x08000a37
 8000a1c:	08000a53 	.word	0x08000a53
 8000a20:	08000a65 	.word	0x08000a65
		case RED_GREEN:
			status = RED_AMBER;
 8000a24:	4b66      	ldr	r3, [pc, #408]	; (8000bc0 <routine_1sec+0x1f4>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	601a      	str	r2, [r3, #0]
			counter2 = amber_timer - 1;
 8000a2a:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <routine_1sec+0x200>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	4a65      	ldr	r2, [pc, #404]	; (8000bc8 <routine_1sec+0x1fc>)
 8000a32:	6013      	str	r3, [r2, #0]
			break;
 8000a34:	e027      	b.n	8000a86 <routine_1sec+0xba>
		case RED_AMBER:
			status = GREEN_RED;
 8000a36:	4b62      	ldr	r3, [pc, #392]	; (8000bc0 <routine_1sec+0x1f4>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
			counter1 = green_timer - 1;
 8000a3c:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <routine_1sec+0x204>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <routine_1sec+0x1f8>)
 8000a44:	6013      	str	r3, [r2, #0]
			counter2 = red_timer - 1;
 8000a46:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <routine_1sec+0x208>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	4a5e      	ldr	r2, [pc, #376]	; (8000bc8 <routine_1sec+0x1fc>)
 8000a4e:	6013      	str	r3, [r2, #0]
			break;
 8000a50:	e019      	b.n	8000a86 <routine_1sec+0xba>
		case GREEN_RED:
			status = AMBER_RED;
 8000a52:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <routine_1sec+0x1f4>)
 8000a54:	2205      	movs	r2, #5
 8000a56:	601a      	str	r2, [r3, #0]
			counter1 = amber_timer - 1;
 8000a58:	4b5c      	ldr	r3, [pc, #368]	; (8000bcc <routine_1sec+0x200>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <routine_1sec+0x1f8>)
 8000a60:	6013      	str	r3, [r2, #0]
			break;
 8000a62:	e010      	b.n	8000a86 <routine_1sec+0xba>
		case AMBER_RED:
			status = RED_GREEN;
 8000a64:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <routine_1sec+0x1f4>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	601a      	str	r2, [r3, #0]
			counter1 = red_timer - 1;
 8000a6a:	4b5a      	ldr	r3, [pc, #360]	; (8000bd4 <routine_1sec+0x208>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	4a54      	ldr	r2, [pc, #336]	; (8000bc4 <routine_1sec+0x1f8>)
 8000a72:	6013      	str	r3, [r2, #0]
			counter2 = green_timer - 1;
 8000a74:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <routine_1sec+0x204>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <routine_1sec+0x1fc>)
 8000a7c:	6013      	str	r3, [r2, #0]
			break;
 8000a7e:	e002      	b.n	8000a86 <routine_1sec+0xba>
		default:
			break;
		}
	}
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <routine_1sec+0xba>
			break;
 8000a84:	bf00      	nop
	switch(status){
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <routine_1sec+0x1f4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	f200 8093 	bhi.w	8000bb8 <routine_1sec+0x1ec>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <routine_1sec+0xcc>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000aed 	.word	0x08000aed
 8000aa0:	08000b31 	.word	0x08000b31
 8000aa4:	08000b75 	.word	0x08000b75
	case RED_GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aae:	484a      	ldr	r0, [pc, #296]	; (8000bd8 <routine_1sec+0x20c>)
 8000ab0:	f001 fabf 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	4847      	ldr	r0, [pc, #284]	; (8000bd8 <routine_1sec+0x20c>)
 8000abc:	f001 fab9 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	4844      	ldr	r0, [pc, #272]	; (8000bd8 <routine_1sec+0x20c>)
 8000ac8:	f001 fab3 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4841      	ldr	r0, [pc, #260]	; (8000bd8 <routine_1sec+0x20c>)
 8000ad2:	f001 faae 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2120      	movs	r1, #32
 8000ada:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <routine_1sec+0x20c>)
 8000adc:	f001 faa9 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	483c      	ldr	r0, [pc, #240]	; (8000bd8 <routine_1sec+0x20c>)
 8000ae6:	f001 faa4 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000aea:	e066      	b.n	8000bba <routine_1sec+0x1ee>
	case RED_AMBER:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af2:	4839      	ldr	r0, [pc, #228]	; (8000bd8 <routine_1sec+0x20c>)
 8000af4:	f001 fa9d 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afe:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <routine_1sec+0x20c>)
 8000b00:	f001 fa97 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <routine_1sec+0x20c>)
 8000b0c:	f001 fa91 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <routine_1sec+0x20c>)
 8000b16:	f001 fa8c 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	482e      	ldr	r0, [pc, #184]	; (8000bd8 <routine_1sec+0x20c>)
 8000b20:	f001 fa87 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <routine_1sec+0x20c>)
 8000b2a:	f001 fa82 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000b2e:	e044      	b.n	8000bba <routine_1sec+0x1ee>
	case GREEN_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b36:	4828      	ldr	r0, [pc, #160]	; (8000bd8 <routine_1sec+0x20c>)
 8000b38:	f001 fa7b 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	4825      	ldr	r0, [pc, #148]	; (8000bd8 <routine_1sec+0x20c>)
 8000b44:	f001 fa75 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <routine_1sec+0x20c>)
 8000b50:	f001 fa6f 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <routine_1sec+0x20c>)
 8000b5a:	f001 fa6a 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <routine_1sec+0x20c>)
 8000b64:	f001 fa65 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <routine_1sec+0x20c>)
 8000b6e:	f001 fa60 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000b72:	e022      	b.n	8000bba <routine_1sec+0x1ee>
	case AMBER_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7a:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <routine_1sec+0x20c>)
 8000b7c:	f001 fa59 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <routine_1sec+0x20c>)
 8000b88:	f001 fa53 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <routine_1sec+0x20c>)
 8000b94:	f001 fa4d 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <routine_1sec+0x20c>)
 8000b9e:	f001 fa48 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <routine_1sec+0x20c>)
 8000ba8:	f001 fa43 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <routine_1sec+0x20c>)
 8000bb2:	f001 fa3e 	bl	8002032 <HAL_GPIO_WritePin>
		break;
 8000bb6:	e000      	b.n	8000bba <routine_1sec+0x1ee>
	default:
		break;
 8000bb8:	bf00      	nop
	}
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000b0 	.word	0x200000b0
 8000bc4:	200000a4 	.word	0x200000a4
 8000bc8:	200000a8 	.word	0x200000a8
 8000bcc:	20000054 	.word	0x20000054
 8000bd0:	20000058 	.word	0x20000058
 8000bd4:	20000050 	.word	0x20000050
 8000bd8:	40010800 	.word	0x40010800

08000bdc <button_signal>:
void button_signal(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	updateBuffer();
 8000be2:	f7ff fd33 	bl	800064c <updateBuffer>
	if(isButtonPressed(0)){
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fab0 	bl	800014c <isButtonPressed>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d03c      	beq.n	8000c6c <button_signal+0x90>
		switch(status){
 8000bf2:	4b7e      	ldr	r3, [pc, #504]	; (8000dec <button_signal+0x210>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3b02      	subs	r3, #2
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	d839      	bhi.n	8000c70 <button_signal+0x94>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <button_signal+0x28>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c21 	.word	0x08000c21
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c21 	.word	0x08000c21
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c31 	.word	0x08000c31
 8000c18:	08000c41 	.word	0x08000c41
 8000c1c:	08000c51 	.word	0x08000c51
		case RED_GREEN:
		case RED_AMBER:
		case GREEN_RED:
		case AMBER_RED:
			modify_val = red_timer;
 8000c20:	4b73      	ldr	r3, [pc, #460]	; (8000df0 <button_signal+0x214>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a73      	ldr	r2, [pc, #460]	; (8000df4 <button_signal+0x218>)
 8000c26:	6013      	str	r3, [r2, #0]
			status = MAN_RED;
 8000c28:	4b70      	ldr	r3, [pc, #448]	; (8000dec <button_signal+0x210>)
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	601a      	str	r2, [r3, #0]
			break;
 8000c2e:	e020      	b.n	8000c72 <button_signal+0x96>
		case MAN_RED:
			modify_val = amber_timer;
 8000c30:	4b71      	ldr	r3, [pc, #452]	; (8000df8 <button_signal+0x21c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a6f      	ldr	r2, [pc, #444]	; (8000df4 <button_signal+0x218>)
 8000c36:	6013      	str	r3, [r2, #0]
			status = MAN_AMBER;
 8000c38:	4b6c      	ldr	r3, [pc, #432]	; (8000dec <button_signal+0x210>)
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	601a      	str	r2, [r3, #0]
			break;
 8000c3e:	e018      	b.n	8000c72 <button_signal+0x96>
		case MAN_AMBER:
			modify_val = green_timer;
 8000c40:	4b6e      	ldr	r3, [pc, #440]	; (8000dfc <button_signal+0x220>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a6b      	ldr	r2, [pc, #428]	; (8000df4 <button_signal+0x218>)
 8000c46:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 8000c48:	4b68      	ldr	r3, [pc, #416]	; (8000dec <button_signal+0x210>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	601a      	str	r2, [r3, #0]
			break;
 8000c4e:	e010      	b.n	8000c72 <button_signal+0x96>
		case MAN_GREEN:
			counter1 = red_timer - 1;
 8000c50:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <button_signal+0x214>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	4a6a      	ldr	r2, [pc, #424]	; (8000e00 <button_signal+0x224>)
 8000c58:	6013      	str	r3, [r2, #0]
			counter2 = green_timer - 1;
 8000c5a:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <button_signal+0x220>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4a68      	ldr	r2, [pc, #416]	; (8000e04 <button_signal+0x228>)
 8000c62:	6013      	str	r3, [r2, #0]
			status = RED_GREEN;
 8000c64:	4b61      	ldr	r3, [pc, #388]	; (8000dec <button_signal+0x210>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
			break;
 8000c6a:	e002      	b.n	8000c72 <button_signal+0x96>
		default:
			break;
		}
	}
 8000c6c:	bf00      	nop
 8000c6e:	e000      	b.n	8000c72 <button_signal+0x96>
			break;
 8000c70:	bf00      	nop
	if(isButtonPressed(1)){
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff fa6a 	bl	800014c <isButtonPressed>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d011      	beq.n	8000ca2 <button_signal+0xc6>
		switch(status){
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <button_signal+0x210>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3b06      	subs	r3, #6
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d80e      	bhi.n	8000ca6 <button_signal+0xca>
		case MAN_RED:
		case MAN_AMBER:
		case MAN_GREEN:
			modify_val++;
 8000c88:	4b5a      	ldr	r3, [pc, #360]	; (8000df4 <button_signal+0x218>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <button_signal+0x218>)
 8000c90:	6013      	str	r3, [r2, #0]
			if(modify_val > 99){
 8000c92:	4b58      	ldr	r3, [pc, #352]	; (8000df4 <button_signal+0x218>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b63      	cmp	r3, #99	; 0x63
 8000c98:	dd07      	ble.n	8000caa <button_signal+0xce>
				modify_val = 1;
 8000c9a:	4b56      	ldr	r3, [pc, #344]	; (8000df4 <button_signal+0x218>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ca0:	e003      	b.n	8000caa <button_signal+0xce>
		default:
			break;
		}
	}
 8000ca2:	bf00      	nop
 8000ca4:	e002      	b.n	8000cac <button_signal+0xd0>
			break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <button_signal+0xd0>
			break;
 8000caa:	bf00      	nop
	if(isButtonPressed(2)){
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fa4d 	bl	800014c <isButtonPressed>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 8092 	beq.w	8000dde <button_signal+0x202>
		switch(status){
 8000cba:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <button_signal+0x210>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b08      	cmp	r3, #8
 8000cc0:	d062      	beq.n	8000d88 <button_signal+0x1ac>
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	f300 808d 	bgt.w	8000de2 <button_signal+0x206>
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d002      	beq.n	8000cd2 <button_signal+0xf6>
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d02c      	beq.n	8000d2a <button_signal+0x14e>
					amber_timer = red_timer - green_timer;
				}
			}
			break;
		default:
			break;
 8000cd0:	e087      	b.n	8000de2 <button_signal+0x206>
			red_timer = modify_val;
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <button_signal+0x218>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <button_signal+0x214>)
 8000cd8:	6013      	str	r3, [r2, #0]
			if(red_timer >= (green_timer + amber_timer)){
 8000cda:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <button_signal+0x220>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <button_signal+0x21c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	441a      	add	r2, r3
 8000ce4:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <button_signal+0x214>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc07      	bgt.n	8000cfc <button_signal+0x120>
				green_timer = red_timer - amber_timer;
 8000cec:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <button_signal+0x214>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <button_signal+0x21c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4a41      	ldr	r2, [pc, #260]	; (8000dfc <button_signal+0x220>)
 8000cf8:	6013      	str	r3, [r2, #0]
			break;
 8000cfa:	e073      	b.n	8000de4 <button_signal+0x208>
				int half = red_timer / 2;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <button_signal+0x214>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0fda      	lsrs	r2, r3, #31
 8000d02:	4413      	add	r3, r2
 8000d04:	105b      	asrs	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
				int mod = red_timer % 2;
 8000d08:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <button_signal+0x214>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	bfb8      	it	lt
 8000d14:	425b      	neglt	r3, r3
 8000d16:	603b      	str	r3, [r7, #0]
				amber_timer = half;
 8000d18:	4a37      	ldr	r2, [pc, #220]	; (8000df8 <button_signal+0x21c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
				green_timer = half + mod;
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a35      	ldr	r2, [pc, #212]	; (8000dfc <button_signal+0x220>)
 8000d26:	6013      	str	r3, [r2, #0]
			break;
 8000d28:	e05c      	b.n	8000de4 <button_signal+0x208>
			amber_timer = modify_val;
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <button_signal+0x218>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <button_signal+0x21c>)
 8000d30:	6013      	str	r3, [r2, #0]
			if(red_timer >= (amber_timer + green_timer)){
 8000d32:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <button_signal+0x21c>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <button_signal+0x220>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	441a      	add	r2, r3
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <button_signal+0x214>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dc07      	bgt.n	8000d54 <button_signal+0x178>
				green_timer = red_timer - amber_timer;
 8000d44:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <button_signal+0x214>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <button_signal+0x21c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	; (8000dfc <button_signal+0x220>)
 8000d50:	6013      	str	r3, [r2, #0]
			break;
 8000d52:	e047      	b.n	8000de4 <button_signal+0x208>
				if((green_timer + amber_timer) <= 99){
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <button_signal+0x220>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <button_signal+0x21c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	2b63      	cmp	r3, #99	; 0x63
 8000d60:	dc07      	bgt.n	8000d72 <button_signal+0x196>
					red_timer = green_timer + amber_timer;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <button_signal+0x220>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <button_signal+0x21c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a20      	ldr	r2, [pc, #128]	; (8000df0 <button_signal+0x214>)
 8000d6e:	6013      	str	r3, [r2, #0]
			break;
 8000d70:	e038      	b.n	8000de4 <button_signal+0x208>
					red_timer = 99;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <button_signal+0x214>)
 8000d74:	2263      	movs	r2, #99	; 0x63
 8000d76:	601a      	str	r2, [r3, #0]
					green_timer = red_timer - amber_timer;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <button_signal+0x214>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <button_signal+0x21c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <button_signal+0x220>)
 8000d84:	6013      	str	r3, [r2, #0]
			break;
 8000d86:	e02d      	b.n	8000de4 <button_signal+0x208>
			if(red_timer >= (green_timer + amber_timer)){
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <button_signal+0x220>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <button_signal+0x21c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	441a      	add	r2, r3
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <button_signal+0x214>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dc07      	bgt.n	8000daa <button_signal+0x1ce>
				amber_timer = red_timer - green_timer;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <button_signal+0x214>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <button_signal+0x220>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <button_signal+0x21c>)
 8000da6:	6013      	str	r3, [r2, #0]
			break;
 8000da8:	e01c      	b.n	8000de4 <button_signal+0x208>
				if((amber_timer + green_timer) <= 99){
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <button_signal+0x21c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <button_signal+0x220>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	2b63      	cmp	r3, #99	; 0x63
 8000db6:	dc07      	bgt.n	8000dc8 <button_signal+0x1ec>
					red_timer = amber_timer + green_timer;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <button_signal+0x21c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <button_signal+0x220>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <button_signal+0x214>)
 8000dc4:	6013      	str	r3, [r2, #0]
			break;
 8000dc6:	e00d      	b.n	8000de4 <button_signal+0x208>
					red_timer = 99;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <button_signal+0x214>)
 8000dca:	2263      	movs	r2, #99	; 0x63
 8000dcc:	601a      	str	r2, [r3, #0]
					amber_timer = red_timer - green_timer;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <button_signal+0x214>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <button_signal+0x220>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <button_signal+0x21c>)
 8000dda:	6013      	str	r3, [r2, #0]
			break;
 8000ddc:	e002      	b.n	8000de4 <button_signal+0x208>
		}
	}
 8000dde:	bf00      	nop
 8000de0:	e000      	b.n	8000de4 <button_signal+0x208>
			break;
 8000de2:	bf00      	nop
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000b0 	.word	0x200000b0
 8000df0:	20000050 	.word	0x20000050
 8000df4:	200000ac 	.word	0x200000ac
 8000df8:	20000054 	.word	0x20000054
 8000dfc:	20000058 	.word	0x20000058
 8000e00:	200000a4 	.word	0x200000a4
 8000e04:	200000a8 	.word	0x200000a8

08000e08 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_UART_RxCpltCallback+0x30>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10a      	bne.n	8000e30 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000e1a:	2332      	movs	r3, #50	; 0x32
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4907      	ldr	r1, [pc, #28]	; (8000e3c <HAL_UART_RxCpltCallback+0x34>)
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <HAL_UART_RxCpltCallback+0x38>)
 8000e22:	f002 f999 	bl	8003158 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	4904      	ldr	r1, [pc, #16]	; (8000e3c <HAL_UART_RxCpltCallback+0x34>)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_UART_RxCpltCallback+0x38>)
 8000e2c:	f002 fa17 	bl	800325e <HAL_UART_Receive_IT>
	}
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	200000b4 	.word	0x200000b4
 8000e40:	20000180 	.word	0x20000180

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f000 fd40 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f82e 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 f8de 	bl	8001010 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e54:	f000 f866 	bl	8000f24 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e58:	f000 f8b0 	bl	8000fbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e5c:	480e      	ldr	r0, [pc, #56]	; (8000e98 <main+0x54>)
 8000e5e:	f001 fd93 	bl	8002988 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e62:	f000 f957 	bl	8001114 <SCH_Init>
  initialize();
 8000e66:	f7ff fa25 	bl	80002b4 <initialize>
  SCH_Add_Task(routine_1sec, 100, 100);
 8000e6a:	2264      	movs	r2, #100	; 0x64
 8000e6c:	2164      	movs	r1, #100	; 0x64
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <main+0x58>)
 8000e70:	f000 f9c0 	bl	80011f4 <SCH_Add_Task>
  SCH_Add_Task(scan7SEG, 100, 5);
 8000e74:	2205      	movs	r2, #5
 8000e76:	2164      	movs	r1, #100	; 0x64
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <main+0x5c>)
 8000e7a:	f000 f9bb 	bl	80011f4 <SCH_Add_Task>
  SCH_Add_Task(blinkLEDs, 100, 25);
 8000e7e:	2219      	movs	r2, #25
 8000e80:	2164      	movs	r1, #100	; 0x64
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <main+0x60>)
 8000e84:	f000 f9b6 	bl	80011f4 <SCH_Add_Task>
  SCH_Add_Task(button_signal, 100, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2164      	movs	r1, #100	; 0x64
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <main+0x64>)
 8000e8e:	f000 f9b1 	bl	80011f4 <SCH_Add_Task>
  while (1)
  {
//	  fsm_automatic_run();
//	  fsm_manual_run();
//	  fsm_for_input_processing();
	  SCH_Dispatch_Tasks();
 8000e92:	f000 fb15 	bl	80014c0 <SCH_Dispatch_Tasks>
 8000e96:	e7fc      	b.n	8000e92 <main+0x4e>
 8000e98:	20000138 	.word	0x20000138
 8000e9c:	080009cd 	.word	0x080009cd
 8000ea0:	08000895 	.word	0x08000895
 8000ea4:	080007ad 	.word	0x080007ad
 8000ea8:	08000bdd 	.word	0x08000bdd

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b090      	sub	sp, #64	; 0x40
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	2228      	movs	r2, #40	; 0x28
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 ff98 	bl	8003df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f8f2 	bl	80020cc <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eee:	f000 f90b 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fb5e 	bl	80025cc <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f16:	f000 f8f7 	bl	8001108 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	; 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f4a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f58:	2209      	movs	r2, #9
 8000f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f6a:	f001 fcbd 	bl	80028e8 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f74:	f000 f8c8 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f86:	f001 fe53 	bl	8002c30 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f90:	f000 f8ba 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000fa2:	f002 f81f 	bl	8002fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fac:	f000 f8ac 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000138 	.word	0x20000138

08000fbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_USART2_UART_Init+0x50>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	f002 f860 	bl	80030b8 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ffe:	f000 f883 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000180 	.word	0x20000180
 800100c:	40004400 	.word	0x40004400

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_GPIO_Init+0xd0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <MX_GPIO_Init+0xd0>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <MX_GPIO_Init+0xd0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_GPIO_Init+0xd0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <MX_GPIO_Init+0xd0>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_GPIO_Init+0xd0>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_GPIO_Init+0xd0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <MX_GPIO_Init+0xd0>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_GPIO_Init+0xd0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED2_Pin|AMBER2_Pin|GREEN2_Pin|EN0_Pin
 800106c:	2200      	movs	r2, #0
 800106e:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <MX_GPIO_Init+0xd4>)
 8001074:	f000 ffdd 	bl	8002032 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|RED1_Pin
                          |AMBER1_Pin|GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001078:	2200      	movs	r2, #0
 800107a:	217f      	movs	r1, #127	; 0x7f
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_GPIO_Init+0xd8>)
 800107e:	f000 ffd8 	bl	8002032 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001082:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4619      	mov	r1, r3
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <MX_GPIO_Init+0xdc>)
 8001098:	f000 fe3a 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED2_Pin AMBER2_Pin GREEN2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin RED1_Pin
                           AMBER1_Pin GREEN1_Pin */
  GPIO_InitStruct.Pin = RED2_Pin|AMBER2_Pin|GREEN2_Pin|EN0_Pin
 800109c:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 80010a0:	613b      	str	r3, [r7, #16]
                          |EN1_Pin|EN2_Pin|EN3_Pin|RED1_Pin
                          |AMBER1_Pin|GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <MX_GPIO_Init+0xd4>)
 80010b6:	f000 fe2b 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80010ba:	237f      	movs	r3, #127	; 0x7f
 80010bc:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_GPIO_Init+0xd8>)
 80010d2:	f000 fe1d 	bl	8001d10 <HAL_GPIO_Init>

}
 80010d6:	bf00      	nop
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40011000 	.word	0x40011000

080010f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
//	timerRun();
//	button_reading();
	SCH_Update();
 80010f8:	f000 f856 	bl	80011a8 <SCH_Update>
	getKeyInput();
 80010fc:	f7ff f850 	bl	80001a0 <getKeyInput>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <SCH_Init>:
 *
 *  Created on: Nov 27, 2023
 *      Author: Lan Vi
 */
#include "scheduler.h"
void SCH_Init(void){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e033      	b.n	8001188 <SCH_Init+0x74>
		SCH_tasks_G[i].pTask = 0x0000;
 8001120:	491f      	ldr	r1, [pc, #124]	; (80011a0 <SCH_Init+0x8c>)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].delay = 0;
 8001132:	491b      	ldr	r1, [pc, #108]	; (80011a0 <SCH_Init+0x8c>)
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].period = 0;
 8001146:	4916      	ldr	r1, [pc, #88]	; (80011a0 <SCH_Init+0x8c>)
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	3308      	adds	r3, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].runme = 0;
 800115a:	4911      	ldr	r1, [pc, #68]	; (80011a0 <SCH_Init+0x8c>)
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	330c      	adds	r3, #12
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].taskID = i;
 800116e:	490c      	ldr	r1, [pc, #48]	; (80011a0 <SCH_Init+0x8c>)
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	3310      	adds	r3, #16
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3301      	adds	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d9c8      	bls.n	8001120 <SCH_Init+0xc>
	}
	Error_code_G = 0;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SCH_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200000c0 	.word	0x200000c0
 80011a4:	200000bc 	.word	0x200000bc

080011a8 <SCH_Update>:
//	SCH_tasks_G[taskID].runme = 0;
//	return return_code;
//}
int numTask = 0;

void SCH_Update(void){
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].pTask && SCH_tasks_G[0].runme == 0){
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <SCH_Update+0x48>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d018      	beq.n	80011e6 <SCH_Update+0x3e>
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <SCH_Update+0x48>)
 80011b6:	7b1b      	ldrb	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <SCH_Update+0x3e>
		if(SCH_tasks_G[0].delay == 0){
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <SCH_Update+0x48>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10b      	bne.n	80011dc <SCH_Update+0x34>
			SCH_tasks_G[0].runme = 1;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <SCH_Update+0x48>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	731a      	strb	r2, [r3, #12]
			if(SCH_tasks_G[0].period){
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <SCH_Update+0x48>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <SCH_Update+0x3e>
				SCH_tasks_G[0].delay = SCH_tasks_G[0].period;
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <SCH_Update+0x48>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <SCH_Update+0x48>)
 80011d8:	6053      	str	r3, [r2, #4]
		}
		else{
			SCH_tasks_G[0].delay -= 1;
		}
	}
}
 80011da:	e004      	b.n	80011e6 <SCH_Update+0x3e>
			SCH_tasks_G[0].delay -= 1;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SCH_Update+0x48>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <SCH_Update+0x48>)
 80011e4:	6053      	str	r3, [r2, #4]
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200000c0 	.word	0x200000c0

080011f4 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t delay, uint32_t period){
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	uint32_t sumdelay = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	e147      	b.n	800149a <SCH_Add_Task+0x2a6>
		if(!SCH_tasks_G[i].pTask){
 800120a:	49aa      	ldr	r1, [pc, #680]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d14e      	bne.n	80012bc <SCH_Add_Task+0xc8>
			SCH_tasks_G[i].pTask = pFunction;
 800121e:	49a5      	ldr	r1, [pc, #660]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[i].delay = delay - sumdelay;
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	1ad1      	subs	r1, r2, r3
 8001236:	489f      	ldr	r0, [pc, #636]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4403      	add	r3, r0
 8001244:	3304      	adds	r3, #4
 8001246:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].period = period;
 8001248:	499a      	ldr	r1, [pc, #616]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	3308      	adds	r3, #8
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[i].taskID = i;
 800125c:	4995      	ldr	r1, [pc, #596]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	3310      	adds	r3, #16
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[i].runme = 0;
 8001270:	4990      	ldr	r1, [pc, #576]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	330c      	adds	r3, #12
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
			if(delay == 0){
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <SCH_Add_Task+0xaa>
				SCH_tasks_G[i].runme = 1;
 800128a:	498a      	ldr	r1, [pc, #552]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	330c      	adds	r3, #12
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
			}
			numTask++;
 800129e:	4b86      	ldr	r3, [pc, #536]	; (80014b8 <SCH_Add_Task+0x2c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a84      	ldr	r2, [pc, #528]	; (80014b8 <SCH_Add_Task+0x2c4>)
 80012a6:	6013      	str	r3, [r2, #0]
			return SCH_tasks_G[i].taskID;
 80012a8:	4982      	ldr	r1, [pc, #520]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3310      	adds	r3, #16
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e0f6      	b.n	80014aa <SCH_Add_Task+0x2b6>
		}
		else{
			if(delay < sumdelay + SCH_tasks_G[i].delay){
 80012bc:	497d      	ldr	r1, [pc, #500]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	3304      	adds	r3, #4
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	4413      	add	r3, r2
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f080 80d1 	bcs.w	800147c <SCH_Add_Task+0x288>
				uint32_t temp = delay - sumdelay;
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	613b      	str	r3, [r7, #16]
				SCH_tasks_G[i].delay -= temp;
 80012e2:	4974      	ldr	r1, [pc, #464]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	3304      	adds	r3, #4
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad1      	subs	r1, r2, r3
 80012f8:	486e      	ldr	r0, [pc, #440]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4403      	add	r3, r0
 8001306:	3304      	adds	r3, #4
 8001308:	6019      	str	r1, [r3, #0]
				for(uint32_t j = numTask; j > i; j--){
 800130a:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <SCH_Add_Task+0x2c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e061      	b.n	80013d6 <SCH_Add_Task+0x1e2>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j-1].pTask;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	4967      	ldr	r1, [pc, #412]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	6819      	ldr	r1, [r3, #0]
 8001324:	4863      	ldr	r0, [pc, #396]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4403      	add	r3, r0
 8001332:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].delay = SCH_tasks_G[j-1].delay;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1e5a      	subs	r2, r3, #1
 8001338:	495e      	ldr	r1, [pc, #376]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	485a      	ldr	r0, [pc, #360]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4403      	add	r3, r0
 8001356:	3304      	adds	r3, #4
 8001358:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].period = SCH_tasks_G[j-1].period;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	4955      	ldr	r1, [pc, #340]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3308      	adds	r3, #8
 800136c:	6819      	ldr	r1, [r3, #0]
 800136e:	4851      	ldr	r0, [pc, #324]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4403      	add	r3, r0
 800137c:	3308      	adds	r3, #8
 800137e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].runme = SCH_tasks_G[j-1].runme;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	494b      	ldr	r1, [pc, #300]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	330c      	adds	r3, #12
 8001392:	7818      	ldrb	r0, [r3, #0]
 8001394:	4947      	ldr	r1, [pc, #284]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	330c      	adds	r3, #12
 80013a4:	4602      	mov	r2, r0
 80013a6:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].taskID = SCH_tasks_G[j-1].taskID + 1;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1e5a      	subs	r2, r3, #1
 80013ac:	4941      	ldr	r1, [pc, #260]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	3310      	adds	r3, #16
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1c59      	adds	r1, r3, #1
 80013be:	483d      	ldr	r0, [pc, #244]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4403      	add	r3, r0
 80013cc:	3310      	adds	r3, #16
 80013ce:	6019      	str	r1, [r3, #0]
				for(uint32_t j = numTask; j > i; j--){
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d899      	bhi.n	8001312 <SCH_Add_Task+0x11e>
				}
                SCH_tasks_G[i].pTask = pFunction;
 80013de:	4935      	ldr	r1, [pc, #212]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]
                SCH_tasks_G[i].delay = delay - sumdelay;
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	1ad1      	subs	r1, r2, r3
 80013f6:	482f      	ldr	r0, [pc, #188]	; (80014b4 <SCH_Add_Task+0x2c0>)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4403      	add	r3, r0
 8001404:	3304      	adds	r3, #4
 8001406:	6019      	str	r1, [r3, #0]
                SCH_tasks_G[i].period = period;
 8001408:	492a      	ldr	r1, [pc, #168]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3308      	adds	r3, #8
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	601a      	str	r2, [r3, #0]
                SCH_tasks_G[i].runme = 0;
 800141c:	4925      	ldr	r1, [pc, #148]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	330c      	adds	r3, #12
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
                if(delay == 0){
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <SCH_Add_Task+0x256>
                	SCH_tasks_G[i].runme = 1;
 8001436:	491f      	ldr	r1, [pc, #124]	; (80014b4 <SCH_Add_Task+0x2c0>)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	330c      	adds	r3, #12
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
                }
                SCH_tasks_G[i].taskID = i;
 800144a:	491a      	ldr	r1, [pc, #104]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	3310      	adds	r3, #16
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	601a      	str	r2, [r3, #0]
                numTask++;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <SCH_Add_Task+0x2c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <SCH_Add_Task+0x2c4>)
 8001466:	6013      	str	r3, [r2, #0]
                return SCH_tasks_G[i].taskID;
 8001468:	4912      	ldr	r1, [pc, #72]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3310      	adds	r3, #16
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	e016      	b.n	80014aa <SCH_Add_Task+0x2b6>
			}
			else{
				sumdelay += SCH_tasks_G[i].delay;
 800147c:	490d      	ldr	r1, [pc, #52]	; (80014b4 <SCH_Add_Task+0x2c0>)
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3304      	adds	r3, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < SCH_MAX_TASKS; i++){
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3301      	adds	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b05      	cmp	r3, #5
 800149e:	f67f aeb4 	bls.w	800120a <SCH_Add_Task+0x16>
			}
		}
	}
	Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <SCH_Add_Task+0x2c8>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
	return SCH_MAX_TASKS;
 80014a8:	2306      	movs	r3, #6
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	200000c0 	.word	0x200000c0
 80014b8:	200000b8 	.word	0x200000b8
 80014bc:	200000bc 	.word	0x200000bc

080014c0 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 80014c0:	b5b0      	push	{r4, r5, r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].runme > 0){
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SCH_Dispatch_Tasks+0x50>)
 80014c8:	7b1b      	ldrb	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d018      	beq.n	8001500 <SCH_Dispatch_Tasks+0x40>
		(*SCH_tasks_G[0].pTask)();
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <SCH_Dispatch_Tasks+0x50>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4798      	blx	r3
		SCH_tasks_G[0].runme = 0;
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <SCH_Dispatch_Tasks+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	731a      	strb	r2, [r3, #12]
		sTask temp = SCH_tasks_G[0];
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <SCH_Dispatch_Tasks+0x50>)
 80014dc:	1d3c      	adds	r4, r7, #4
 80014de:	461d      	mov	r5, r3
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(0);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 f813 	bl	8001514 <SCH_Delete_Task>
		if(temp.period > 0){
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(temp.pTask, temp.delay, temp.period);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe7a 	bl	80011f4 <SCH_Add_Task>
		}
	}
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001500:	2101      	movs	r1, #1
 8001502:	2000      	movs	r0, #0
 8001504:	f000 fdc6 	bl	8002094 <HAL_PWR_EnterSLEEPMode>
}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bdb0      	pop	{r4, r5, r7, pc}
 8001510:	200000c0 	.word	0x200000c0

08001514 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	uint8_t return_code = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
	if(taskID >= 0 && taskID < SCH_MAX_TASKS && SCH_tasks_G[taskID].pTask){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b05      	cmp	r3, #5
 8001524:	f200 80b8 	bhi.w	8001698 <SCH_Delete_Task+0x184>
 8001528:	495e      	ldr	r1, [pc, #376]	; (80016a4 <SCH_Delete_Task+0x190>)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80ad 	beq.w	8001698 <SCH_Delete_Task+0x184>
		return_code = 1;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
		for(uint32_t i = taskID; i < numTask; i++){
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	e061      	b.n	800160c <SCH_Delete_Task+0xf8>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i+1].pTask;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	4955      	ldr	r1, [pc, #340]	; (80016a4 <SCH_Delete_Task+0x190>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	4852      	ldr	r0, [pc, #328]	; (80016a4 <SCH_Delete_Task+0x190>)
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4403      	add	r3, r0
 8001568:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].delay = SCH_tasks_G[i+1].delay;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	494d      	ldr	r1, [pc, #308]	; (80016a4 <SCH_Delete_Task+0x190>)
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3304      	adds	r3, #4
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	4849      	ldr	r0, [pc, #292]	; (80016a4 <SCH_Delete_Task+0x190>)
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4403      	add	r3, r0
 800158c:	3304      	adds	r3, #4
 800158e:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].period = SCH_tasks_G[i+1].period;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	4943      	ldr	r1, [pc, #268]	; (80016a4 <SCH_Delete_Task+0x190>)
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3308      	adds	r3, #8
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	483f      	ldr	r0, [pc, #252]	; (80016a4 <SCH_Delete_Task+0x190>)
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4403      	add	r3, r0
 80015b2:	3308      	adds	r3, #8
 80015b4:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].runme = SCH_tasks_G[i+1].runme;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	493a      	ldr	r1, [pc, #232]	; (80016a4 <SCH_Delete_Task+0x190>)
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	330c      	adds	r3, #12
 80015c8:	7818      	ldrb	r0, [r3, #0]
 80015ca:	4936      	ldr	r1, [pc, #216]	; (80016a4 <SCH_Delete_Task+0x190>)
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	330c      	adds	r3, #12
 80015da:	4602      	mov	r2, r0
 80015dc:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].taskID = SCH_tasks_G[i+1].taskID - 1;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	4930      	ldr	r1, [pc, #192]	; (80016a4 <SCH_Delete_Task+0x190>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3310      	adds	r3, #16
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1e59      	subs	r1, r3, #1
 80015f4:	482b      	ldr	r0, [pc, #172]	; (80016a4 <SCH_Delete_Task+0x190>)
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4403      	add	r3, r0
 8001602:	3310      	adds	r3, #16
 8001604:	6019      	str	r1, [r3, #0]
		for(uint32_t i = taskID; i < numTask; i++){
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3301      	adds	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <SCH_Delete_Task+0x194>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4293      	cmp	r3, r2
 8001616:	d397      	bcc.n	8001548 <SCH_Delete_Task+0x34>
		}
        SCH_tasks_G[numTask - 1].pTask = 0x0000;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <SCH_Delete_Task+0x194>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	4921      	ldr	r1, [pc, #132]	; (80016a4 <SCH_Delete_Task+0x190>)
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[numTask - 1].delay = 0;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <SCH_Delete_Task+0x194>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1e5a      	subs	r2, r3, #1
 8001634:	491b      	ldr	r1, [pc, #108]	; (80016a4 <SCH_Delete_Task+0x190>)
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3304      	adds	r3, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[numTask - 1].period = 0;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <SCH_Delete_Task+0x194>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	4915      	ldr	r1, [pc, #84]	; (80016a4 <SCH_Delete_Task+0x190>)
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3308      	adds	r3, #8
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[numTask - 1].runme = 0;
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <SCH_Delete_Task+0x194>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	490f      	ldr	r1, [pc, #60]	; (80016a4 <SCH_Delete_Task+0x190>)
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	330c      	adds	r3, #12
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
        SCH_tasks_G[numTask - 1].taskID = 0;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <SCH_Delete_Task+0x194>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	4909      	ldr	r1, [pc, #36]	; (80016a4 <SCH_Delete_Task+0x190>)
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3310      	adds	r3, #16
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
        numTask -= 1;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SCH_Delete_Task+0x194>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <SCH_Delete_Task+0x194>)
 8001696:	6013      	str	r3, [r2, #0]
	}
	return return_code;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	200000c0 	.word	0x200000c0
 80016a8:	200000b8 	.word	0x200000b8

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_MspInit+0x5c>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_MspInit+0x5c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_MspInit+0x5c>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_MspInit+0x5c>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_MspInit+0x5c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_MspInit+0x5c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_MspInit+0x60>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_MspInit+0x60>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d113      	bne.n	800174a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_TIM_Base_MspInit+0x44>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_TIM_Base_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x44>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201c      	movs	r0, #28
 8001740:	f000 f9fd 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001744:	201c      	movs	r0, #28
 8001746:	f000 fa16 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_UART_MspInit+0x98>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d137      	bne.n	80017e8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_UART_MspInit+0x9c>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_UART_MspInit+0x9c>)
 800177e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001782:	61d3      	str	r3, [r2, #28]
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_UART_MspInit+0x9c>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_UART_MspInit+0x9c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_UART_MspInit+0x9c>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_UART_MspInit+0x9c>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a8:	2304      	movs	r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	480f      	ldr	r0, [pc, #60]	; (80017f8 <HAL_UART_MspInit+0xa0>)
 80017bc:	f000 faa8 	bl	8001d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c0:	2308      	movs	r3, #8
 80017c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <HAL_UART_MspInit+0xa0>)
 80017d4:	f000 fa9c 	bl	8001d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2026      	movs	r0, #38	; 0x26
 80017de:	f000 f9ae 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e2:	2026      	movs	r0, #38	; 0x26
 80017e4:	f000 f9c7 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40004400 	.word	0x40004400
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010800 	.word	0x40010800

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f889 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM2_IRQHandler+0x10>)
 8001852:	f001 f8e5 	bl	8002a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000138 	.word	0x20000138

08001860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <USART2_IRQHandler+0x10>)
 8001866:	f001 fd1f 	bl	80032a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000180 	.word	0x20000180

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001880:	f7ff fff8 	bl	8001874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001886:	490c      	ldr	r1, [pc, #48]	; (80018b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800189c:	4c09      	ldr	r4, [pc, #36]	; (80018c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f002 fa7d 	bl	8003da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f7ff fac9 	bl	8000e44 <main>
  bx lr
 80018b2:	4770      	bx	lr
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018bc:	08003e4c 	.word	0x08003e4c
  ldr r2, =_sbss
 80018c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018c4:	200001cc 	.word	0x200001cc

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f923 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fee0 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f93b 	bl	8001b92 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f903 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000005c 	.word	0x2000005c
 8001950:	20000064 	.word	0x20000064
 8001954:	20000060 	.word	0x20000060

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x1c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x20>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_IncTick+0x20>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000064 	.word	0x20000064
 8001978:	200001c8 	.word	0x200001c8

0800197c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_GetTick+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	200001c8 	.word	0x200001c8

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <__NVIC_EnableIRQ+0x34>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff90 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff2d 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff42 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff90 	bl	8001a80 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5f 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff35 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d008      	beq.n	8001bd4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e020      	b.n	8001c16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 020e 	bic.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d005      	beq.n	8001c44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e051      	b.n	8001ce8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020e 	bic.w	r2, r2, #14
 8001c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a22      	ldr	r2, [pc, #136]	; (8001cf4 <HAL_DMA_Abort_IT+0xd4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d029      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <HAL_DMA_Abort_IT+0xd8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d022      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x9e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_DMA_Abort_IT+0xdc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01a      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x98>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <HAL_DMA_Abort_IT+0xe0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d012      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x92>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_DMA_Abort_IT+0xe4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00a      	beq.n	8001cac <HAL_DMA_Abort_IT+0x8c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_DMA_Abort_IT+0xe8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_DMA_Abort_IT+0x86>
 8001ca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ca4:	e00e      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xa4>
 8001ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001caa:	e00b      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xa4>
 8001cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb0:	e008      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xa4>
 8001cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb6:	e005      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xa4>
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	e002      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xa4>
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xa4>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_DMA_Abort_IT+0xec>)
 8001cc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	4798      	blx	r3
    } 
  }
  return status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020008 	.word	0x40020008
 8001cf8:	4002001c 	.word	0x4002001c
 8001cfc:	40020030 	.word	0x40020030
 8001d00:	40020044 	.word	0x40020044
 8001d04:	40020058 	.word	0x40020058
 8001d08:	4002006c 	.word	0x4002006c
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e148      	b.n	8001fb6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8137 	bne.w	8001fb0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4aa3      	ldr	r2, [pc, #652]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4aa1      	ldr	r2, [pc, #644]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4aa1      	ldr	r2, [pc, #644]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a9f      	ldr	r2, [pc, #636]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a9f      	ldr	r2, [pc, #636]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a9d      	ldr	r2, [pc, #628]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a9d      	ldr	r2, [pc, #628]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a9b      	ldr	r2, [pc, #620]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a9b      	ldr	r2, [pc, #620]	; (8001fe4 <HAL_GPIO_Init+0x2d4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a99      	ldr	r2, [pc, #612]	; (8001fe4 <HAL_GPIO_Init+0x2d4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a82      	ldr	r2, [pc, #520]	; (8001fe8 <HAL_GPIO_Init+0x2d8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8090 	beq.w	8001fb0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_GPIO_Init+0x2dc>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_GPIO_Init+0x2dc>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_GPIO_Init+0x2dc>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x2e0>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a49      	ldr	r2, [pc, #292]	; (8001ff4 <HAL_GPIO_Init+0x2e4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a48      	ldr	r2, [pc, #288]	; (8001ff8 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1dc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_GPIO_Init+0x2ec>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1d8>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x1e2>
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x1e2>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x1e2>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f02:	493b      	ldr	r1, [pc, #236]	; (8001ff0 <HAL_GPIO_Init+0x2e0>)
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4933      	ldr	r1, [pc, #204]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	492d      	ldr	r1, [pc, #180]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4929      	ldr	r1, [pc, #164]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4923      	ldr	r1, [pc, #140]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	491f      	ldr	r1, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4919      	ldr	r1, [pc, #100]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4915      	ldr	r1, [pc, #84]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f47f aeaf 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	372c      	adds	r7, #44	; 0x2c
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204e:	e003      	b.n	8002058 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43d9      	mvns	r1, r3
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80020a6:	f023 0304 	bic.w	r3, r3, #4
 80020aa:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80020b2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80020b4:	e002      	b.n	80020bc <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80020b6:	bf40      	sev
    __WFE();
 80020b8:	bf20      	wfe
    __WFE();
 80020ba:	bf20      	wfe
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e26c      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b92      	ldr	r3, [pc, #584]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00c      	beq.n	8002112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f8:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d112      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
 8002104:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d10b      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x12c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d168      	bne.n	80021f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e246      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x76>
 8002134:	4b80      	ldr	r3, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7f      	ldr	r2, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7a      	ldr	r2, [pc, #488]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b78      	ldr	r3, [pc, #480]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a77      	ldr	r2, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xbc>
 800216e:	4b72      	ldr	r3, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a71      	ldr	r2, [pc, #452]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fbe8 	bl	800197c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fbe4 	bl	800197c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1fa      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe4>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fbd4 	bl	800197c <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fbd0 	bl	800197c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1e6      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x10c>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1ba      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4939      	ldr	r1, [pc, #228]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fb89 	bl	800197c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff fb85 	bl	800197c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e19b      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4927      	ldr	r1, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fb68 	bl	800197c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff fb64 	bl	800197c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e17a      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03a      	beq.n	8002350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d019      	beq.n	8002316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7ff fb48 	bl	800197c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff fb44 	bl	800197c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e15a      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 facc 	bl	80028ac <RCC_Delay>
 8002314:	e01c      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff fb2e 	bl	800197c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	e00f      	b.n	8002344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fb2a 	bl	800197c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d908      	bls.n	8002344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e140      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	42420000 	.word	0x42420000
 8002340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b9e      	ldr	r3, [pc, #632]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e9      	bne.n	8002324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a6 	beq.w	80024aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b97      	ldr	r3, [pc, #604]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a93      	ldr	r2, [pc, #588]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b8e      	ldr	r3, [pc, #568]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a8a      	ldr	r2, [pc, #552]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7ff faeb 	bl	800197c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff fae7 	bl	800197c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	; 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0fd      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b81      	ldr	r3, [pc, #516]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x312>
 80023d0:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a7a      	ldr	r2, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e02d      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x334>
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a75      	ldr	r2, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x356>
 8002408:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a6c      	ldr	r2, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fa9b 	bl	800197c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff fa97 	bl	800197c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0ab      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCC_OscConfig+0x37e>
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fa85 	bl	800197c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff fa81 	bl	800197c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e095      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8081 	beq.w	80025b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d061      	beq.n	8002584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d146      	bne.n	8002556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x4fc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff fa55 	bl	800197c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff fa51 	bl	800197c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e067      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	492d      	ldr	r1, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a19      	ldr	r1, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	4927      	ldr	r1, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x4fc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff fa25 	bl	800197c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff fa21 	bl	800197c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e037      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x46a>
 8002554:	e02f      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_RCC_OscConfig+0x4fc>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fa0e 	bl	800197c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff fa0a 	bl	800197c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e020      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x498>
 8002582:	e018      	b.n	80025b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e013      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420060 	.word	0x42420060

080025cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0d0      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4965      	ldr	r1, [pc, #404]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d040      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e073      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7ff f95e 	bl	800197c <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7ff f95a 	bl	800197c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e053      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d210      	bcs.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f821 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1cc>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f8bc 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	08003e18 	.word	0x08003e18
 8002798:	2000005c 	.word	0x2000005c
 800279c:	20000060 	.word	0x20000060

080027a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_RCC_GetSysClockFreq+0x94>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ce:	e027      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_GetSysClockFreq+0x98>)
 80027d2:	613b      	str	r3, [r7, #16]
      break;
 80027d4:	e027      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0c5b      	lsrs	r3, r3, #17
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	fb02 f203 	mul.w	r2, r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e004      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	613b      	str	r3, [r7, #16]
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	693b      	ldr	r3, [r7, #16]
}
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	007a1200 	.word	0x007a1200
 800283c:	08003e30 	.word	0x08003e30
 8002840:	08003e40 	.word	0x08003e40
 8002844:	003d0900 	.word	0x003d0900

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <HAL_RCC_GetHCLKFreq+0x10>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	2000005c 	.word	0x2000005c

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002860:	f7ff fff2 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08003e28 	.word	0x08003e28

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002888:	f7ff ffde 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4903      	ldr	r1, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08003e28 	.word	0x08003e28

080028ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <RCC_Delay+0x34>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <RCC_Delay+0x38>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c8:	bf00      	nop
  }
  while (Delay --);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	60fa      	str	r2, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f9      	bne.n	80028c8 <RCC_Delay+0x1c>
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	2000005c 	.word	0x2000005c
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e041      	b.n	800297e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fefe 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 fa6e 	bl	8002e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d001      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e035      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <HAL_TIM_Base_Start_IT+0x90>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d009      	beq.n	80029d6 <HAL_TIM_Base_Start_IT+0x4e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d004      	beq.n	80029d6 <HAL_TIM_Base_Start_IT+0x4e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_TIM_Base_Start_IT+0x94>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d111      	bne.n	80029fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d010      	beq.n	8002a0a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e007      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400

08002a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0202 	mvn.w	r2, #2
 8002a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9b4 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9a7 	bl	8002dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9b6 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d122      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d11b      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0204 	mvn.w	r2, #4
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f98a 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f97d 	bl	8002dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f98c 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f960 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f953 	bl	8002dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f962 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0210 	mvn.w	r2, #16
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f936 	bl	8002dd0 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f929 	bl	8002dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f938 	bl	8002de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0201 	mvn.w	r2, #1
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe faa6 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d107      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa6b 	bl	80030a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8fc 	bl	8002df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0220 	mvn.w	r2, #32
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fa36 	bl	8003094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIM_ConfigClockSource+0x1c>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0b4      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x186>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c84:	d03e      	beq.n	8002d04 <HAL_TIM_ConfigClockSource+0xd4>
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	f200 8087 	bhi.w	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c92:	f000 8086 	beq.w	8002da2 <HAL_TIM_ConfigClockSource+0x172>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	d87f      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b70      	cmp	r3, #112	; 0x70
 8002c9e:	d01a      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d87b      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b60      	cmp	r3, #96	; 0x60
 8002ca6:	d050      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x11a>
 8002ca8:	2b60      	cmp	r3, #96	; 0x60
 8002caa:	d877      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b50      	cmp	r3, #80	; 0x50
 8002cae:	d03c      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0xfa>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d873      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d058      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x13a>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d86f      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b30      	cmp	r3, #48	; 0x30
 8002cbe:	d064      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	2b30      	cmp	r3, #48	; 0x30
 8002cc2:	d86b      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d060      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d867      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05c      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d05a      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd4:	e062      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f000 f95e 	bl	8002fa6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
      break;
 8002d02:	e04f      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f000 f947 	bl	8002fa6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d26:	609a      	str	r2, [r3, #8]
      break;
 8002d28:	e03c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f000 f8be 	bl	8002eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2150      	movs	r1, #80	; 0x50
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f915 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002d48:	e02c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f000 f8dc 	bl	8002f14 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2160      	movs	r1, #96	; 0x60
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f905 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002d68:	e01c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 f89e 	bl	8002eb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f8f5 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002d88:	e00c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f000 f8ec 	bl	8002f72 <TIM_ITRx_SetConfig>
      break;
 8002d9a:	e003      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	e000      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <TIM_Base_SetConfig+0xa8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <TIM_Base_SetConfig+0x28>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0x28>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <TIM_Base_SetConfig+0xac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <TIM_Base_SetConfig+0xa8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0x52>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0x52>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <TIM_Base_SetConfig+0xac>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <TIM_Base_SetConfig+0xa8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40000400 	.word	0x40000400

08002eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 030a 	bic.w	r3, r3, #10
 8002ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0210 	bic.w	r2, r3, #16
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	031b      	lsls	r3, r3, #12
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f043 0307 	orr.w	r3, r3, #7
 8002f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	609a      	str	r2, [r3, #8]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e041      	b.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d004      	beq.n	8003054 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10c      	bne.n	800306e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	4313      	orrs	r3, r2
 8003064:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400

08003094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e042      	b.n	8003150 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe fb3a 	bl	8001758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	; 0x24
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fdc5 	bl	8003c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	d16d      	bne.n	8003254 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_UART_Transmit+0x2c>
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e066      	b.n	8003256 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2221      	movs	r2, #33	; 0x21
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003196:	f7fe fbf1 	bl	800197c <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b0:	d108      	bne.n	80031c4 <HAL_UART_Transmit+0x6c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e003      	b.n	80031cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031cc:	e02a      	b.n	8003224 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb14 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e036      	b.n	8003256 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	3302      	adds	r3, #2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	e007      	b.n	8003216 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	3301      	adds	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1cf      	bne.n	80031ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2140      	movs	r1, #64	; 0x40
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fae4 	bl	8003806 <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e006      	b.n	8003256 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d112      	bne.n	800329e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Receive_IT+0x26>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e00b      	b.n	80032a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb24 	bl	80038e2 <UART_Start_Receive_IT>
 800329a:	4603      	mov	r3, r0
 800329c:	e000      	b.n	80032a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b0ba      	sub	sp, #232	; 0xe8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0x66>
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fc01 	bl	8003b0e <UART_Receive_IT>
      return;
 800330c:	e25b      	b.n	80037c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800330e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80de 	beq.w	80034d4 <HAL_UART_IRQHandler+0x22c>
 8003318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003328:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80d1 	beq.w	80034d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00b      	beq.n	8003356 <HAL_UART_IRQHandler+0xae>
 800333e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_UART_IRQHandler+0xd2>
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_UART_IRQHandler+0xf6>
 8003386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f043 0204 	orr.w	r2, r3, #4
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800339e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <HAL_UART_IRQHandler+0x126>
 80033aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	f043 0208 	orr.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 81f2 	beq.w	80037bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_UART_IRQHandler+0x14e>
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fb8c 	bl	8003b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_UART_IRQHandler+0x17a>
 800341a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04f      	beq.n	80034c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa96 	bl	8003954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d041      	beq.n	80034ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800344c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800346e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1d9      	bne.n	8003436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d013      	beq.n	80034b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	4a7e      	ldr	r2, [pc, #504]	; (8003688 <HAL_UART_IRQHandler+0x3e0>)
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fbc2 	bl	8001c20 <HAL_DMA_Abort_IT>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ac:	4610      	mov	r0, r2
 80034ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00e      	b.n	80034d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f993 	bl	80037de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e00a      	b.n	80034d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f98f 	bl	80037de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	e006      	b.n	80034d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f98b 	bl	80037de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80034ce:	e175      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	bf00      	nop
    return;
 80034d2:	e173      	b.n	80037bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f040 814f 	bne.w	800377c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8148 	beq.w	800377c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8141 	beq.w	800377c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80b6 	beq.w	800368c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800352c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8145 	beq.w	80037c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800353a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800353e:	429a      	cmp	r2, r3
 8003540:	f080 813e 	bcs.w	80037c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800354a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b20      	cmp	r3, #32
 8003554:	f000 8088 	beq.w	8003668 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800356e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003576:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003584:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003590:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800359c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1d9      	bne.n	8003558 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3314      	adds	r3, #20
 80035c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e1      	bne.n	80035a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3314      	adds	r3, #20
 80035e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3314      	adds	r3, #20
 8003600:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003604:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003606:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800360a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e3      	bne.n	80035e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	f023 0310 	bic.w	r3, r3, #16
 800363c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800364a:	65ba      	str	r2, [r7, #88]	; 0x58
 800364c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e3      	bne.n	8003626 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe faa1 	bl	8001baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003676:	b29b      	uxth	r3, r3
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	b29b      	uxth	r3, r3
 800367c:	4619      	mov	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8b6 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003684:	e09c      	b.n	80037c0 <HAL_UART_IRQHandler+0x518>
 8003686:	bf00      	nop
 8003688:	08003a19 	.word	0x08003a19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003694:	b29b      	uxth	r3, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 808e 	beq.w	80037c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8089 	beq.w	80037c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036d6:	647a      	str	r2, [r7, #68]	; 0x44
 80036d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e3      	bne.n	80036b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	623b      	str	r3, [r7, #32]
   return(result);
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800370e:	633a      	str	r2, [r7, #48]	; 0x30
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e3      	bne.n	80036ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0310 	bic.w	r3, r3, #16
 8003746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	69b9      	ldr	r1, [r7, #24]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	617b      	str	r3, [r7, #20]
   return(result);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e3      	bne.n	8003730 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800376e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f83b 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800377a:	e023      	b.n	80037c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800377c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <HAL_UART_IRQHandler+0x4f4>
 8003788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f953 	bl	8003a40 <UART_Transmit_IT>
    return;
 800379a:	e014      	b.n	80037c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <HAL_UART_IRQHandler+0x51e>
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f992 	bl	8003ade <UART_EndTransmit_IT>
    return;
 80037ba:	e004      	b.n	80037c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80037bc:	bf00      	nop
 80037be:	e002      	b.n	80037c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80037c4:	bf00      	nop
  }
}
 80037c6:	37e8      	adds	r7, #232	; 0xe8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b090      	sub	sp, #64	; 0x40
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003816:	e050      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d04c      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x30>
 8003826:	f7fe f8a9 	bl	800197c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003832:	429a      	cmp	r2, r3
 8003834:	d241      	bcs.n	80038ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003856:	637a      	str	r2, [r7, #52]	; 0x34
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388a:	623a      	str	r2, [r7, #32]
 800388c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	69f9      	ldr	r1, [r7, #28]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	61bb      	str	r3, [r7, #24]
   return(result);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d09f      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2222      	movs	r2, #34	; 0x22
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003926:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b095      	sub	sp, #84	; 0x54
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800397c:	643a      	str	r2, [r7, #64]	; 0x40
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3314      	adds	r3, #20
 8003996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	61fb      	str	r3, [r7, #28]
   return(result);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d119      	bne.n	8003a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	60bb      	str	r3, [r7, #8]
   return(result);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f023 0310 	bic.w	r3, r3, #16
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	330c      	adds	r3, #12
 80039ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039ec:	61ba      	str	r2, [r7, #24]
 80039ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6979      	ldr	r1, [r7, #20]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	613b      	str	r3, [r7, #16]
   return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e5      	bne.n	80039cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a0e:	bf00      	nop
 8003a10:	3754      	adds	r7, #84	; 0x54
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff fed3 	bl	80037de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b21      	cmp	r3, #33	; 0x21
 8003a52:	d13e      	bne.n	8003ad2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d114      	bne.n	8003a88 <UART_Transmit_IT+0x48>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d110      	bne.n	8003a88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	1c9a      	adds	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]
 8003a86:	e008      	b.n	8003a9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6211      	str	r1, [r2, #32]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003abc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003acc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fe64 	bl	80037cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08c      	sub	sp, #48	; 0x30
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b22      	cmp	r3, #34	; 0x22
 8003b20:	f040 80ae 	bne.w	8003c80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d117      	bne.n	8003b5e <UART_Receive_IT+0x50>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b5c:	e026      	b.n	8003bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d007      	beq.n	8003b82 <UART_Receive_IT+0x74>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <UART_Receive_IT+0x82>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e008      	b.n	8003ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d15d      	bne.n	8003c7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0220 	bic.w	r2, r2, #32
 8003bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d135      	bne.n	8003c72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f023 0310 	bic.w	r3, r3, #16
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	623a      	str	r2, [r7, #32]
 8003c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	69f9      	ldr	r1, [r7, #28]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d10a      	bne.n	8003c64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fdc0 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
 8003c70:	e002      	b.n	8003c78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd f8c8 	bl	8000e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e002      	b.n	8003c82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e000      	b.n	8003c82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	; 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cc6:	f023 030c 	bic.w	r3, r3, #12
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <UART_SetConfig+0x114>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d103      	bne.n	8003cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7fe fdc6 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	e002      	b.n	8003d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7fe fdae 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8003d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <UART_SetConfig+0x118>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	0119      	lsls	r1, r3, #4
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009a      	lsls	r2, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <UART_SetConfig+0x118>)
 8003d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2064      	movs	r0, #100	; 0x64
 8003d42:	fb00 f303 	mul.w	r3, r0, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	3332      	adds	r3, #50	; 0x32
 8003d4c:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <UART_SetConfig+0x118>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d58:	4419      	add	r1, r3
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <UART_SetConfig+0x118>)
 8003d72:	fba3 0302 	umull	r0, r3, r3, r2
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2064      	movs	r0, #100	; 0x64
 8003d7a:	fb00 f303 	mul.w	r3, r0, r3
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	3332      	adds	r3, #50	; 0x32
 8003d84:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <UART_SetConfig+0x118>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	f003 020f 	and.w	r2, r3, #15
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	440a      	add	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40013800 	.word	0x40013800
 8003da4:	51eb851f 	.word	0x51eb851f

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	2600      	movs	r6, #0
 8003dac:	4d0c      	ldr	r5, [pc, #48]	; (8003de0 <__libc_init_array+0x38>)
 8003dae:	4c0d      	ldr	r4, [pc, #52]	; (8003de4 <__libc_init_array+0x3c>)
 8003db0:	1b64      	subs	r4, r4, r5
 8003db2:	10a4      	asrs	r4, r4, #2
 8003db4:	42a6      	cmp	r6, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	f000 f822 	bl	8003e00 <_init>
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	4d0a      	ldr	r5, [pc, #40]	; (8003de8 <__libc_init_array+0x40>)
 8003dc0:	4c0a      	ldr	r4, [pc, #40]	; (8003dec <__libc_init_array+0x44>)
 8003dc2:	1b64      	subs	r4, r4, r5
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	42a6      	cmp	r6, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd0:	4798      	blx	r3
 8003dd2:	3601      	adds	r6, #1
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dda:	4798      	blx	r3
 8003ddc:	3601      	adds	r6, #1
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	08003e44 	.word	0x08003e44
 8003de4:	08003e44 	.word	0x08003e44
 8003de8:	08003e44 	.word	0x08003e44
 8003dec:	08003e48 	.word	0x08003e48

08003df0 <memset>:
 8003df0:	4603      	mov	r3, r0
 8003df2:	4402      	add	r2, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memset+0xa>
 8003df8:	4770      	bx	lr
 8003dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfe:	e7f9      	b.n	8003df4 <memset+0x4>

08003e00 <_init>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr

08003e0c <_fini>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	bf00      	nop
 8003e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e12:	bc08      	pop	{r3}
 8003e14:	469e      	mov	lr, r3
 8003e16:	4770      	bx	lr
